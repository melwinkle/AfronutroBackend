# Generated by Django 5.1.1 on 2024-09-27 14:15

import django.contrib.postgres.fields
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import users.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='EducationalContent',
            fields=[
                ('content_id', models.CharField(default=users.models.generate_content_id, editable=False, max_length=8, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('content_type', models.CharField(max_length=100)),
                ('content_url', models.URLField(null=True)),
                ('tags', models.JSONField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('content_image', models.FileField(blank=True, null=True, upload_to=users.models.content_file_path)),
            ],
        ),
        migrations.CreateModel(
            name='NutritionalInformation',
            fields=[
                ('nutrition_info_id', models.CharField(default=users.models.generate_content_id, editable=False, max_length=8, primary_key=True, serialize=False)),
                ('calories', models.IntegerField(default=0.0)),
                ('protein', models.FloatField(default=0.0)),
                ('carbs', models.FloatField(default=0.0)),
                ('fat', models.FloatField(default=0.0)),
                ('fiber', models.FloatField(default=0.0)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(max_length=30, unique=True)),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('age', models.IntegerField(default=0)),
                ('gender', models.CharField(max_length=20, null=True)),
                ('height', models.FloatField(default=0.0)),
                ('weight', models.FloatField(default=0.0)),
                ('is_verified', models.BooleanField(default=False)),
                ('last_password_change', models.DateTimeField(default=django.utils.timezone.now)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'users_user',
            },
        ),
        migrations.CreateModel(
            name='Ingredient',
            fields=[
                ('ingredients_id', models.CharField(default=users.models.generate_content_id, editable=False, max_length=8, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('calories', models.FloatField()),
                ('carbs', models.FloatField()),
                ('protein', models.FloatField()),
                ('fat', models.FloatField()),
                ('minerals', models.JSONField()),
                ('vitamins', models.JSONField()),
                ('substitutes', models.ManyToManyField(blank=True, to='users.ingredient')),
            ],
        ),
        migrations.CreateModel(
            name='DietaryAssessment',
            fields=[
                ('dietary_assessment_id', models.CharField(default=users.models.generate_content_id, editable=False, max_length=8, primary_key=True, serialize=False)),
                ('dietary_preferences', models.JSONField()),
                ('activity_levels', models.JSONField(validators=[django.core.validators.MinLengthValidator(1), django.core.validators.MaxLengthValidator(3)])),
                ('health_goals', models.JSONField(validators=[django.core.validators.MinLengthValidator(1), django.core.validators.MaxLengthValidator(3)])),
                ('goals', models.JSONField(blank=True)),
                ('tdee', models.FloatField()),
                ('bmi', models.FloatField()),
                ('assessment', models.TextField()),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('disliked_ingredients', models.ManyToManyField(related_name='disliked_by_assessments', to='users.ingredient')),
                ('liked_ingredients', models.ManyToManyField(related_name='liked_by_assessments', to='users.ingredient')),
            ],
        ),
        migrations.CreateModel(
            name='PasswordHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Recipe',
            fields=[
                ('recipe_id', models.CharField(default=users.models.generate_content_id, editable=False, max_length=8, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('ingredients', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100), size=None)),
                ('cuisine', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(choices=[('ghanaian', 'Ghanaian'), ('nigerian', 'Nigeria'), ('west african', 'West African'), ('european', 'European'), ('american', 'American'), ('asian', 'Asian'), ('middle eastern', 'Middle Eastern'), ('indian', 'Indian'), ('chinese', 'Chinese'), ('japanese', 'Japanese'), ('korean', 'Korean'), ('thai', 'Thai'), ('vietnamese', 'Vietnamese'), ('italian', 'Italian'), ('mexican', 'Mexican'), ('spanish', 'Spanish'), ('french', 'French'), ('german', 'German'), ('british', 'British'), ('australian', 'Australian'), ('canadian', 'Canadian')], max_length=20), size=5)),
                ('recipe_info', models.TextField()),
                ('vegan', models.BooleanField(default=False)),
                ('vegetarian', models.BooleanField(default=False)),
                ('gluten_free', models.BooleanField(default=False)),
                ('pescatarian', models.BooleanField(default=False)),
                ('halal', models.BooleanField(default=False)),
                ('meal_type', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(choices=[('breakfast', 'Breakfast'), ('lunch', 'Lunch'), ('dinner', 'Dinner'), ('snack', 'Snack')], max_length=20), size=2)),
                ('dish_type', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(choices=[('main', 'Main'), ('side', 'Side'), ('protein', 'Protein'), ('vegetable', 'Vegetable'), ('carb', 'Carb'), ('dessert', 'Dessert'), ('appetizer', 'Appetizer'), ('soup', 'Soup'), ('salad', 'Salad'), ('sauce', 'Sauce'), ('drink', 'Drink'), ('one-pot', 'One-Pot')], max_length=20), size=3)),
                ('tags', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(choices=[('dairy-free', 'Dairy-Free'), ('keto', 'Keto'), ('paleo', 'Paleo'), ('high-protein', 'High-Protein'), ('low-protein', 'Low-Protein'), ('low-carb', 'Low-Carb'), ('nut-free', 'Nut_Free'), ('shellfish-free', 'Shellfish-Free'), ('lactose-free', 'Lactose-Free'), ('egg-free', 'Egg-Free'), ('peanut-free', 'Peanut-Free'), ('soy_free', 'Soy-Free'), ('low-sugar', 'Low-Sugar'), ('spicy', 'Spicy'), ('sweet', 'Sweet'), ('savory', 'Savory'), ('organic', 'Organic'), ('high-fiber', 'High-Fiber')], max_length=50), size=5)),
                ('nutrition', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='users.nutritionalinformation')),
            ],
        ),
        migrations.CreateModel(
            name='Rating',
            fields=[
                ('rating_id', models.CharField(default=users.models.generate_content_id, editable=False, max_length=8, primary_key=True, serialize=False)),
                ('rating', models.FloatField(default=0.0)),
                ('comment', models.TextField(blank=True)),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('recipe', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.recipe')),
            ],
            options={
                'unique_together': {('user', 'recipe')},
            },
        ),
        migrations.CreateModel(
            name='Favorite',
            fields=[
                ('favorite_id', models.CharField(default=users.models.generate_content_id, editable=False, max_length=8, primary_key=True, serialize=False)),
                ('added_on', models.DateTimeField(default=django.utils.timezone.now)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('recipe', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.recipe')),
            ],
            options={
                'unique_together': {('user', 'recipe')},
            },
        ),
    ]
