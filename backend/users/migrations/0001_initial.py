# Generated by Django 5.1.1 on 2024-11-02 20:28

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import users.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('recipes', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='EducationalContent',
            fields=[
                ('content_id', models.CharField(default=users.models.generate_content_id, editable=False, max_length=8, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('content_type', models.CharField(max_length=100)),
                ('content_url', models.URLField(null=True)),
                ('tags', models.JSONField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('content_image', models.FileField(blank=True, null=True, upload_to=users.models.content_file_path)),
                ('content_main', models.TextField(default='Test')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(max_length=30, unique=True)),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('age', models.IntegerField(default=0)),
                ('gender', models.CharField(max_length=20, null=True)),
                ('height', models.FloatField(default=0.0)),
                ('weight', models.FloatField(default=0.0)),
                ('is_verified', models.BooleanField(default=False)),
                ('activity_levels', models.FloatField(default=1.55)),
                ('last_password_change', models.DateTimeField(default=django.utils.timezone.now)),
                ('tdee', models.FloatField(default=0.0)),
                ('bmi', models.FloatField(default=0.0)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'users_user',
            },
        ),
        migrations.CreateModel(
            name='DietaryAssessment',
            fields=[
                ('dietary_assessment_id', models.CharField(default=users.models.generate_content_id, editable=False, max_length=8, primary_key=True, serialize=False)),
                ('dietary_preferences', models.JSONField()),
                ('activity_levels', models.JSONField(validators=[django.core.validators.MinLengthValidator(1), django.core.validators.MaxLengthValidator(3)])),
                ('health_goals', models.JSONField(validators=[django.core.validators.MinLengthValidator(1), django.core.validators.MaxLengthValidator(3)])),
                ('cuisine_preference', models.JSONField(default=dict)),
                ('tdee', models.FloatField(default=0.0)),
                ('bmi', models.FloatField(default=0.0)),
                ('assessment', models.TextField()),
                ('disliked_ingredients', models.ManyToManyField(related_name='disliked_by_assessments', to='recipes.ingredient')),
                ('liked_ingredients', models.ManyToManyField(related_name='liked_by_assessments', to='recipes.ingredient')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PasswordHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
    ]
